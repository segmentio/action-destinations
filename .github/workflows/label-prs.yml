# This workflow labels PRs based on the files that were changed. It uses a custom script to this
# instead of actions/labeler as few of the tags are more than just file changes.

name: Label PRs
on:
  pull_request_target:
    types: [opened, synchronize, reopened]

jobs:
  pr-labeler:
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Compute Labels
        id: compute-labels
        uses: actions/github-script@v7
        with:
          # Required for the script to access team membership information.
          # Scope: members:read and contentes:read permission on the organization.
          github-token: ${{ secrets.GH_PAT_MEMBER_AND_PULL_REQUEST_READONLY }}
          script: |
            const script = require('./scripts/github-action/compute-labels.js')
            await script({github, context, core})
      # Separating apply labels to separate step to avoid using PAT token auth.
      - name: Apply Labels
        uses: actions/github-script@v7
        env:
          labelsToAdd: '${{ steps.compute-labels.outputs.add }}'
          labelsToRemove: '${{ steps.compute-labels.outputs.remove }}'
        with:
          script: |
            const { labelsToAdd, labelsToRemove, DRY_RUN } = process.env
            if(Boolean(DRY_RUN)){
              core.info(`Would have added labels: ${labelsToAdd}`)
              core.info(`Would have removed labels: ${labelsToRemove}`)
              return
            }
            if(labelsToAdd.length > 0) {
              await github.rest.issues.addLabels({
                issue_number: context.payload.pull_request.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: labelsToAdd.split(',')
              });
            }
            if(labelsToRemove.length > 0) {
              const requests = labelsToRemove.split(',').map(label => {
                return github.rest.issues.removeLabel({
                  issue_number: context.payload.pull_request.number,
                  name: label,
                  owner: context.repo.owner,
                  repo: context.repo.repo
                });
              });
              await Promise.all(requests);
            }

      - name: Comment for mapping-kit changes
        uses: actions/github-script@v7
        env:
          labelsToAdd: '${{ steps.compute-labels.outputs.add }}'
          labelsToRemove: '${{ steps.compute-labels.outputs.remove }}'
        with:
          script: |
            const { labelsToAdd, labelsToRemove, DRY_RUN } = process.env
            const shouldAddComment = labelsToAdd.length > 0 && labelsToAdd.split(",").some(x=>x.includes("mappingkit"))
            const shouldRemoveComment = labelsToRemove.length > 0 && labelsToRemove.split(",").some(x=>x.includes("mappingkit"))
            // Get the list of comments on the PR
            const response = await github.rest.issues.listComments({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo
            })
            const mappingKitComment = response.data.find(comment => comment.body.includes('mapping-kit go'))
            if(shouldAddComment){
                if (mappingKitComment) {
                  console.log('Already commented on this PR')
                  return
                }
                // Add comment to the PR
                await github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: `This PR makes changes to mapping-kit. Please ensure that the changes are reflected in the [mapping-kit go](https://github.com/segmentio/mapping-kit) library as well and link the PR in description.`
                  })
            }
            if(shouldRemoveComment) {
              if (!mappingKitComment) {
                console.log('No mapping-kit comment to remove')
                return
              }
              // Remove comment from the PR
              await github.rest.issues.deleteComment({
                  comment_id: mappingKitComment.id,
                  owner: context.repo.owner,
                  repo: context.repo.repo
                })
            }

      - name: Get Team Member
        id: get-team-member
        uses: actions/github-script@v7
        env:
          labelsToAdd: '${{ steps.compute-labels.outputs.add }}'
        with:
          github-token: ${{ secrets.GH_PAT_MEMBER_AND_PULL_REQUEST_READONLY }}
          script: |
            const { labelsToAdd } = process.env

            // Check if team:external label is being added
            if (labelsToAdd && labelsToAdd.split(',').includes('team:external')) {
              core.setOutput('skip', 'true')
              core.setOutput('reason', 'external contributor')
              return
            }

            // Check if team:external label already exists on the PR
            const existingLabels = context.payload.pull_request.labels.map((label) => label.name)
            if (existingLabels.includes('team:external')) {
              core.setOutput('skip', 'true')
              core.setOutput('reason', 'external contributor (existing label)')
              return
            }

            // Determine which team should review based on the labels being added
            function determineReviewingTeam(labelsToAdd, existingLabels) {
              const allLabels = [...(labelsToAdd ? labelsToAdd.split(',') : []), ...existingLabels]
              
              // Priority-based team assignment
              if (allLabels.includes('actions:core') || allLabels.includes('actions:mappingkit')) {
                return 'libraries-web-team'
              }
              
              if (allLabels.includes('mode:cloud') || allLabels.includes('mode:device')) {
                return 'strategic-connections-team'
              }
              
              // If team:segment-core label is present, assign to libraries-web-team
              if (allLabels.includes('team:segment-core')) {
                return 'libraries-web-team'
              }
              
              // Default fallback for internal contributors
              if (allLabels.includes('team:segment')) {
                return 'strategic-connections-team'
              }
              
              return null
            }

            const teamToAssign = determineReviewingTeam(labelsToAdd, existingLabels)

            // Only proceed for strategic-connections-team
            if (teamToAssign !== 'strategic-connections-team') {
              core.setOutput('skip', 'true')
              core.setOutput('reason', `only assigning for strategic-connections-team, found ${teamToAssign || 'none'}`)
              return
            }

            // Get a random team member
            try {
              const team = await github.rest.teams.listMembersInOrg({
                team_slug: teamToAssign,
                org: context.repo.owner
              })
              
              if (team.data.length === 0) {
                core.setOutput('skip', 'true')
                core.setOutput('reason', 'no team members found')
                return
              }
              
              // Get a random member from the team
              const randomIndex = Math.floor(Math.random() * team.data.length)
              const selectedMember = team.data[randomIndex]
              
              core.setOutput('reviewer', selectedMember.login)
              core.setOutput('team', teamToAssign)
              core.setOutput('skip', 'false')
              core.info(`Selected ${selectedMember.login} from ${team.data.length} members in ${teamToAssign}`)
              
            } catch (error) {
              core.setOutput('skip', 'true')
              core.setOutput('reason', `failed to get team members: ${error.message}`)
            }

      - name: Assign Reviewers
        if: steps.get-team-member.outputs.skip != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const reviewer = '${{ steps.get-team-member.outputs.reviewer }}'
            const team = '${{ steps.get-team-member.outputs.team }}'

            // Check if PR already has reviewers assigned
            const prDetails = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            })

            if (prDetails.data.requested_reviewers.length > 0) {
              core.info('PR already has reviewers assigned')
              return
            }

            try {
              await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                reviewers: [reviewer]
              })
              core.info(`Assigned ${reviewer} from ${team} team as reviewer`)
            } catch (error) {
              core.error(`Failed to assign ${reviewer} as reviewer: ${error.message}`)
            }

      - name: Log Skip Reviewer Assign Reason
        if: steps.get-team-member.outputs.skip == 'true'
        run: echo "Skipping reviewer assignment - ${{ steps.get-team-member.outputs.reason }}"
