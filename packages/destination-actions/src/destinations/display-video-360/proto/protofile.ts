// @generated by protoc-gen-es v2.2.3 with parameter "target=ts"
// @generated from file bulk_upload.proto (syntax proto2)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from '@bufbuild/protobuf/codegenv1'
import { enumDesc, fileDesc, messageDesc } from '@bufbuild/protobuf/codegenv1'
import type { Message } from '@bufbuild/protobuf'

/**
 * Describes the file bulk_upload.proto.
 */
export const file_bulk_upload: GenFile =
  /*@__PURE__*/
  fileDesc(
    'ChFidWxrX3VwbG9hZC5wcm90byKMAgoRVXNlckRhdGFPcGVyYXRpb24SEQoHdXNlcl9pZBgBIAEoCToAEjEKDHVzZXJfaWRfdHlwZRgOIAEoDjILLlVzZXJJZFR5cGU6DkdPT0dMRV9VU0VSX0lEEhcKDHVzZXJfbGlzdF9pZBgEIAEoAzoBMBIiChd0aW1lX2FkZGVkX3RvX3VzZXJfbGlzdBgFIAEoAzoBMBIqCh90aW1lX2FkZGVkX3RvX3VzZXJfbGlzdF9pbl91c2VjGAggASgDOgEwEhUKBmRlbGV0ZRgGIAEoCDoFZmFsc2USFgoHb3B0X291dBgMIAEoCDoFZmFsc2USGQoOZGF0YV9zb3VyY2VfaWQYByABKAU6ATAifAoWVXBkYXRlVXNlcnNEYXRhUmVxdWVzdBIfCgNvcHMYASADKAsyEi5Vc2VyRGF0YU9wZXJhdGlvbhIhChJzZW5kX25vdGlmaWNhdGlvbnMYAiABKAg6BWZhbHNlEh4KD3Byb2Nlc3NfY29uc2VudBgDIAEoCDoFZmFsc2UiigEKCUVycm9ySW5mbxIXCgx1c2VyX2xpc3RfaWQYAiABKAM6ATASEQoHdXNlcl9pZBgDIAEoCToAEjEKDHVzZXJfaWRfdHlwZRgHIAEoDjILLlVzZXJJZFR5cGU6DkdPT0dMRV9VU0VSX0lEEh4KCmVycm9yX2NvZGUYBCABKA4yCi5FcnJvckNvZGUiUwoQTm90aWZpY2F0aW9uSW5mbxIRCgd1c2VyX2lkGAEgASgJOgASLAoRbm90aWZpY2F0aW9uX2NvZGUYAiABKA4yES5Ob3RpZmljYXRpb25Db2RlIq0BChdVcGRhdGVVc2Vyc0RhdGFSZXNwb25zZRIaCgZzdGF0dXMYASABKA4yCi5FcnJvckNvZGUSGgoGZXJyb3JzGAIgAygLMgouRXJyb3JJbmZvEigKDW5vdGlmaWNhdGlvbnMYAyADKAsyES5Ob3RpZmljYXRpb25JbmZvEjAKE25vdGlmaWNhdGlvbl9zdGF0dXMYBCABKA4yEy5Ob3RpZmljYXRpb25TdGF0dXMqlAEKClVzZXJJZFR5cGUSEgoOR09PR0xFX1VTRVJfSUQQABIICgRJREZBEAESGgoWQU5EUk9JRF9BRFZFUlRJU0lOR19JRBACEggKBFJJREEQBRIICgRBRkFJEAYSCAoETVNBSRAHEhUKEUdFTkVSSUNfREVWSUNFX0lEEAkSFwoTUEFSVE5FUl9QUk9WSURFRF9JRBAEKicKEE5vdGlmaWNhdGlvbkNvZGUSEwoPSU5BQ1RJVkVfQ09PS0lFEAAqRAoSTm90aWZpY2F0aW9uU3RhdHVzEhMKD05PX05PVElGSUNBVElPThAAEhkKFU5PVElGSUNBVElPTlNfT01JVFRFRBABKr4CCglFcnJvckNvZGUSDAoITk9fRVJST1IQABITCg9QQVJUSUFMX1NVQ0NFU1MQARIVChFQRVJNSVNTSU9OX0RFTklFRBACEgwKCEJBRF9EQVRBEAMSDgoKQkFEX0NPT0tJRRAEEhQKEEJBRF9BVFRSSUJVVEVfSUQQBRISCg5CQURfTkVUV09SS19JRBAHEhMKD1JFUVVFU1RfVE9PX0JJRxAIEhEKDUVNUFRZX1JFUVVFU1QQCRISCg5JTlRFUk5BTF9FUlJPUhAKEhYKEkJBRF9EQVRBX1NPVVJDRV9JRBALEhEKDUJBRF9USU1FU1RBTVAQDBIjCh9NSVNTSU5HX0NPTlNFTlRfV0lMTF9CRV9EUk9QUEVEEBYSEwoPTUlTU0lOR19DT05TRU5UEBcSDgoKVU5LTk9XTl9JRBAV'
  )

/**
 * Update data for a single user.
 *
 * @generated from message UserDataOperation
 */
export type UserDataOperation = Message<'UserDataOperation'> & {
  /**
   * User id.  The type is determined by the user_id_type field.
   *
   * Must always be present.  Specifies which user this operation applies to.
   *
   * @generated from field: optional string user_id = 1 [default = ""];
   */
  userId: string

  /**
   * The type of the user id.
   *
   * @generated from field: optional UserIdType user_id_type = 14 [default = GOOGLE_USER_ID];
   */
  userIdType: UserIdType

  /**
   * The id of the userlist.  This can be retrieved from the AdX UI for AdX
   * customers, the AdWords API for non-AdX customers, or through your Technical
   * Account Manager.
   *
   * @generated from field: optional int64 user_list_id = 4 [default = 0];
   */
  userListId: bigint

  /**
   * Optional time (seconds since the epoch) when the user performed an action
   * causing them to be added to the list.  Using the default value of 0
   * indicates that the current time on the server should be used.
   *
   * @generated from field: optional int64 time_added_to_user_list = 5 [default = 0];
   */
  timeAddedToUserList: bigint

  /**
   * Same as time_added_to_user_list but with finer grained time resolution, in
   * microseconds.  If both timestamps are specified,
   * time_added_to_user_list_in_usec will be used.
   *
   * @generated from field: optional int64 time_added_to_user_list_in_usec = 8 [default = 0];
   */
  timeAddedToUserListInUsec: bigint

  /**
   * Set to true if the operation is a deletion.
   *
   * @generated from field: optional bool delete = 6 [default = false];
   */
  delete: boolean

  /**
   * Set true if the user opted out from being targeted.
   *
   * @generated from field: optional bool opt_out = 12 [default = false];
   */
  optOut: boolean

  /**
   * An id indicating the data source which contributed this membership.  The id
   * is required to be in the range of 1 to 1000 and any ids greater than this
   * will result in an error of type BAD_DATA_SOURCE_ID.  These ids don't have
   * any semantics for Google and may be used as labels for reporting purposes.
   *
   * @generated from field: optional int32 data_source_id = 7 [default = 0];
   */
  dataSourceId: number
}

/**
 * Describes the message UserDataOperation.
 * Use `create(UserDataOperationSchema)` to create a new message.
 */
export const UserDataOperationSchema: GenMessage<UserDataOperation> = /*@__PURE__*/ messageDesc(file_bulk_upload, 0)

/**
 * This protocol buffer is used to update user data.  It is sent as the payload
 * of an HTTPS POST request with the Content-Type header set to
 * "application/octet-stream" (preferrably Content-Encoding: gzip).
 *
 * @generated from message UpdateUsersDataRequest
 */
export type UpdateUsersDataRequest = Message<'UpdateUsersDataRequest'> & {
  /**
   * Multiple operations over user attributes or user lists.
   *
   * @generated from field: repeated UserDataOperation ops = 1;
   */
  ops: UserDataOperation[]

  /**
   * If true, request sending notifications about the given users in the
   * response.  Note that in some circumstances notifications may not be sent
   * even if requested.  In this case the notification_status field of the
   * response will be set to NOTIFICATIONS_OMITTED.
   *
   * @generated from field: optional bool send_notifications = 2 [default = false];
   */
  sendNotifications: boolean

  /**
   * Partners using the Bulk Upload API must indicate that they have the proper
   * legal basis to share user data with Google for Bulk Upload purposes using
   * the process_consent parameter. This requirement applies to all Bulk Upload
   * requests.
   *
   * For user data that requires end-user consent as
   * required by Google's EU User Consent Policy
   * (see https://www.google.com/about/company/user-consent-policy/) or
   * by other local laws, partners are required to obtain
   * end-user consent and indicate gathered consent
   * by setting process_consent=True.
   *
   * For user data which is not subject to end-user consent requirements,
   * partners are required to indicate that consent is not
   * required by setting process_consent=True.
   *
   * Requests without `process_consent=True` will be filtered.
   *
   * @generated from field: optional bool process_consent = 3 [default = false];
   */
  processConsent: boolean
}

/**
 * Describes the message UpdateUsersDataRequest.
 * Use `create(UpdateUsersDataRequestSchema)` to create a new message.
 */
export const UpdateUsersDataRequestSchema: GenMessage<UpdateUsersDataRequest> =
  /*@__PURE__*/
  messageDesc(file_bulk_upload, 1)

/**
 * Information about an error with an individual user operation.
 *
 * @generated from message ErrorInfo
 */
export type ErrorInfo = Message<'ErrorInfo'> & {
  /**
   * The user_list_id in the request which caused problems.  This may be empty
   * if the problem was with a particular user id.
   *
   * @generated from field: optional int64 user_list_id = 2 [default = 0];
   */
  userListId: bigint

  /**
   * The user_id which caused problems.  This may be empty if other data was bad
   * regardless of a cookie.
   *
   * @generated from field: optional string user_id = 3 [default = ""];
   */
  userId: string

  /**
   * The type of the user ID.
   *
   * @generated from field: optional UserIdType user_id_type = 7 [default = GOOGLE_USER_ID];
   */
  userIdType: UserIdType

  /**
   * @generated from field: optional ErrorCode error_code = 4;
   */
  errorCode: ErrorCode
}

/**
 * Describes the message ErrorInfo.
 * Use `create(ErrorInfoSchema)` to create a new message.
 */
export const ErrorInfoSchema: GenMessage<ErrorInfo> = /*@__PURE__*/ messageDesc(file_bulk_upload, 2)

/**
 * Per user notification information.
 *
 * @generated from message NotificationInfo
 */
export type NotificationInfo = Message<'NotificationInfo'> & {
  /**
   * The user_id for which the notification applies.  One of the user_ids sent
   * in a UserDataOperation.
   *
   * @generated from field: optional string user_id = 1 [default = ""];
   */
  userId: string

  /**
   * @generated from field: optional NotificationCode notification_code = 2;
   */
  notificationCode: NotificationCode
}

/**
 * Describes the message NotificationInfo.
 * Use `create(NotificationInfoSchema)` to create a new message.
 */
export const NotificationInfoSchema: GenMessage<NotificationInfo> = /*@__PURE__*/ messageDesc(file_bulk_upload, 3)

/**
 * Response to the UpdateUsersDataRequest.  Sent in HTTP response to the
 * original POST request, with the Content-Type header set to
 * "application/octet-stream".  The HTTP response status is either 200 (no
 * errors) or 400, in which case the protocol buffer will provide error details.
 *
 * @generated from message UpdateUsersDataResponse
 */
export type UpdateUsersDataResponse = Message<'UpdateUsersDataResponse'> & {
  /**
   * When status == PARTIAL_SUCCESS, some (not all) of the operations failed and
   * the "errors" field has details on the types and number of errors
   * encountered.  When status == NO_ERROR, all the data was imported
   * successfully.  When status > PARTIAL_SUCCESS no data was imported.
   *
   * @generated from field: optional ErrorCode status = 1;
   */
  status: ErrorCode

  /**
   * Each operation that failed is reported as a separate error here when
   * status == PARTIAL_SUCCESS.
   *
   * @generated from field: repeated ErrorInfo errors = 2;
   */
  errors: ErrorInfo[]

  /**
   * Useful, non-error, information about the user ids in the request.  Each
   * NotificationInfo provides information about a single user id.  Only sent if
   * UpdateUsersDataRequest.send_notifications is set to true.
   *
   * @generated from field: repeated NotificationInfo notifications = 3;
   */
  notifications: NotificationInfo[]

  /**
   * Indicates why a notification has not been sent.
   *
   * @generated from field: optional NotificationStatus notification_status = 4;
   */
  notificationStatus: NotificationStatus
}

/**
 * Describes the message UpdateUsersDataResponse.
 * Use `create(UpdateUsersDataResponseSchema)` to create a new message.
 */
export const UpdateUsersDataResponseSchema: GenMessage<UpdateUsersDataResponse> =
  /*@__PURE__*/
  messageDesc(file_bulk_upload, 4)

/**
 * The type of identifier being uploaded.
 *
 * @generated from enum UserIdType
 */
export enum UserIdType {
  /**
   * A user identifier received through the cookie matching service.
   *
   * @generated from enum value: GOOGLE_USER_ID = 0;
   */
  GOOGLE_USER_ID = 0,

  /**
   * iOS Advertising ID.
   *
   * @generated from enum value: IDFA = 1;
   */
  IDFA = 1,

  /**
   * Android Advertising ID.
   *
   * @generated from enum value: ANDROID_ADVERTISING_ID = 2;
   */
  ANDROID_ADVERTISING_ID = 2,

  /**
   * Roku ID.
   *
   * @generated from enum value: RIDA = 5;
   */
  RIDA = 5,

  /**
   * Amazon Fire TV ID.
   *
   * @generated from enum value: AFAI = 6;
   */
  AFAI = 6,

  /**
   * XBOX/Microsoft ID.
   *
   * @generated from enum value: MSAI = 7;
   */
  MSAI = 7,

  /**
   * A "generic" category for any UUID formatted device provided ID.
   * Allows partner uploads without needing to select a specific,
   * pre-existing Device ID type.
   *
   * @generated from enum value: GENERIC_DEVICE_ID = 9;
   */
  GENERIC_DEVICE_ID = 9,

  /**
   * Partner provided ID. User identifier in partner's namespace.
   * If the partner has sent the partner user identifier during cookie matching,
   * then Google will be able to store user list membership associated with
   * the partner's user identifier.
   * See cookie matching documentation:
   * https://developers.google.com/authorized-buyers/rtb/cookie-guide
   *
   * @generated from enum value: PARTNER_PROVIDED_ID = 4;
   */
  PARTNER_PROVIDED_ID = 4
}

/**
 * Describes the enum UserIdType.
 */
export const UserIdTypeSchema: GenEnum<UserIdType> = /*@__PURE__*/ enumDesc(file_bulk_upload, 0)

/**
 * Notification code.
 *
 * @generated from enum NotificationCode
 */
export enum NotificationCode {
  /**
   * A cookie is considered inactive if Google has not seen any activity related
   * to the cookie in several days.
   *
   * @generated from enum value: INACTIVE_COOKIE = 0;
   */
  INACTIVE_COOKIE = 0
}

/**
 * Describes the enum NotificationCode.
 */
export const NotificationCodeSchema: GenEnum<NotificationCode> = /*@__PURE__*/ enumDesc(file_bulk_upload, 1)

/**
 * Notification status code.
 *
 * @generated from enum NotificationStatus
 */
export enum NotificationStatus {
  /**
   * No need to send notifications for this request.
   *
   * @generated from enum value: NO_NOTIFICATION = 0;
   */
  NO_NOTIFICATION = 0,

  /**
   * Google decided to not send notifications, even though there were
   * notifications to send.
   *
   * @generated from enum value: NOTIFICATIONS_OMITTED = 1;
   */
  NOTIFICATIONS_OMITTED = 1
}

/**
 * Describes the enum NotificationStatus.
 */
export const NotificationStatusSchema: GenEnum<NotificationStatus> = /*@__PURE__*/ enumDesc(file_bulk_upload, 2)

/**
 * Response error codes.
 *
 * @generated from enum ErrorCode
 */
export enum ErrorCode {
  /**
   * @generated from enum value: NO_ERROR = 0;
   */
  NO_ERROR = 0,

  /**
   * Some of the user data operations failed.  See comments in the
   * UpdateUserDataResponse
   *
   * @generated from enum value: PARTIAL_SUCCESS = 1;
   */
  PARTIAL_SUCCESS = 1,

  /**
   * Provided network_id cannot add data to attribute_id or non-HTTPS.
   *
   * @generated from enum value: PERMISSION_DENIED = 2;
   */
  PERMISSION_DENIED = 2,

  /**
   * Cannot parse payload.
   *
   * @generated from enum value: BAD_DATA = 3;
   */
  BAD_DATA = 3,

  /**
   * Cannot decode provided cookie.
   *
   * @generated from enum value: BAD_COOKIE = 4;
   */
  BAD_COOKIE = 4,

  /**
   * Invalid or closed user_list_id.
   *
   * @generated from enum value: BAD_ATTRIBUTE_ID = 5;
   */
  BAD_ATTRIBUTE_ID = 5,

  /**
   * An invalid nid parameter was provided in the request.
   *
   * @generated from enum value: BAD_NETWORK_ID = 7;
   */
  BAD_NETWORK_ID = 7,

  /**
   * Request payload size over allowed limit.
   *
   * @generated from enum value: REQUEST_TOO_BIG = 8;
   */
  REQUEST_TOO_BIG = 8,

  /**
   * No UserDataOperation messages in UpdateUsersDataRequest.
   *
   * @generated from enum value: EMPTY_REQUEST = 9;
   */
  EMPTY_REQUEST = 9,

  /**
   * The server could not process the request due to an internal error. Retrying
   * the same request later is suggested.
   *
   * @generated from enum value: INTERNAL_ERROR = 10;
   */
  INTERNAL_ERROR = 10,

  /**
   * Bad data_source_id -- most likely out of range from [1, 1000].
   *
   * @generated from enum value: BAD_DATA_SOURCE_ID = 11;
   */
  BAD_DATA_SOURCE_ID = 11,

  /**
   * The timestamp is a past/future time that is too far from current time.
   *
   * @generated from enum value: BAD_TIMESTAMP = 12;
   */
  BAD_TIMESTAMP = 12,

  /**
   * Partners using the Bulk Upload API must indicate that they have the proper
   * legal basis to share user data with Google for Bulk Upload purposes using
   * the process_consent parameter.  This requirement applies to all Bulk Upload
   * requests.
   *
   * For user data that requires end-user consent as
   * required by Google's EU User Consent Policy
   * (see https://www.google.com/about/company/user-consent-policy/) or
   * by other local laws, partners are required to obtain
   * end-user consent and indicate gathered consent
   * by setting process_consent=True.
   *
   * For user data which is not subject to end-user consent requirements,
   * partners are required to indicate that consent is not
   * required by setting process_consent=True.
   *
   * Requests where `process_consent` is missing will be filtered and
   * return the following error:
   *
   * @generated from enum value: MISSING_CONSENT_WILL_BE_DROPPED = 22;
   */
  MISSING_CONSENT_WILL_BE_DROPPED = 22,

  /**
   * Requests where `process_consent` is set to `false` will be filtered and
   * return the following error:
   *
   * @generated from enum value: MISSING_CONSENT = 23;
   */
  MISSING_CONSENT = 23,

  /**
   * Missing internal mapping.
   * If operation is PARTNER_PROVIDED_ID, then this error means our mapping
   * table does not contain corresponding google user id. This mapping is
   * recorded during Cookie Matching.
   * For other operations, then it may be internal error.
   *
   * @generated from enum value: UNKNOWN_ID = 21;
   */
  UNKNOWN_ID = 21
}

/**
 * Describes the enum ErrorCode.
 */
export const ErrorCodeSchema: GenEnum<ErrorCode> = /*@__PURE__*/ enumDesc(file_bulk_upload, 3)
