import { ActionDefinition, PayloadValidationError, omit } from '@segment/actions-core'
import type { Settings } from '../generated-types'
import type { Payload } from './generated-types'
import dayjs from '../../../lib/dayjs'
import {
  EMAIL_FIELD,
  USER_ID_FIELD,
  CREATED_AT_FIELD,
  PREFER_USER_ID_FIELD,
  MERGE_NESTED_OBJECTS_FIELD,
  ITEMS_FIELD,
  CAMPAGIN_ID_FIELD,
  TEMPLATE_ID_FIELD,
  EVENT_DATA_FIELDS,
  USER_DATA_FIELDS
} from '../shared-fields'

const action: ActionDefinition<Settings, Payload> = {
  title: 'Track Purchase',
  description: 'Tracks a purchase to Iterable',
  defaultSubscription: 'type = "track" and event == "Order Completed"',
  fields: {
    id: {
      label: 'Order ID',
      description:
        'Similar to `Event ID` in custom events. Iterable recommends mapping `order_id` or `messageId`. If a purchase exists with that id, the purchase will be updated. If none is specified, a new id will automatically be generated by Iterable',
      type: 'string',
      required: false,
      default: {
        '@path': '$.properties.order_id'
      }
    },
    user: {
      label: 'User Data',
      description: 'Updates user data or adds a user if none exists',
      type: 'object',
      required: true,
      additionalProperties: false,
      default: {
        email: {
          '@if': {
            exists: { '@path': '$.properties.email' },
            then: { '@path': '$.properties.email' },
            else: { '@path': '$.context.traits.email' }
          }
        },
        userId: { '@path': '$.userId' },
        dataFields: { '@path': '$.context.traits' },
        preferUserId: false,
        mergeNestedObjects: false
      },
      properties: {
        email: {
          ...EMAIL_FIELD
        },
        userId: {
          ...USER_ID_FIELD
        },
        dataFields: {
          ...USER_DATA_FIELDS
        },
        preferUserId: {
          ...PREFER_USER_ID_FIELD
        },
        mergeNestedObjects: {
          ...MERGE_NESTED_OBJECTS_FIELD
        }
      }
    },
    dataFields: {
      ...EVENT_DATA_FIELDS
    },
    items: {
      ...ITEMS_FIELD
    },
    total: {
      label: 'Total',
      description: 'Total order dollar amount.',
      type: 'number',
      required: true,
      default: { '@path': '$.properties.total' }
    },
    createdAt: {
      ...CREATED_AT_FIELD
    },
    campaignId: {
      ...CAMPAGIN_ID_FIELD
    },
    templateId: {
      ...TEMPLATE_ID_FIELD
    }
  },
  perform: (request, { payload }) => {
    const { user, dataFields } = payload

    if (!user.email && !user.userId) {
      throw new PayloadValidationError('Must include email or userId.')
    }

    const reservedItemKeys = [
      'product_id',
      'id',
      'sku',
      'name',
      'price',
      'quantity',
      'categories',
      'category',
      'url',
      'image_url'
    ]

    /**
     * Transforms an array of product items by removing reserved keys from dataFields and converting categories to string arrays.
     */
    function transformItems(items: Payload['items']): CartItem[] {
      return items.map(({ dataFields, categories, ...rest }) => ({
        ...rest,
        dataFields: omit(dataFields, reservedItemKeys),
        ...(categories && { categories: [categories] })
      }))
    }

    type CartItem = {
      id: string
      name: string
      sku?: string
      quantity: number
      price: number
      description?: string
      categories?: string[]
      url?: string
      imageUrl?: string
      dataFields?: {
        [k: string]: unknown
      }
    }

    interface TrackPurchaseRequest {
      id?: string
      user: {
        email?: string
        userId?: string
        mergeNestedObjects?: boolean
        preferUserId?: boolean
        dataFields?: {
          [k: string]: unknown
        }
      }
      items: CartItem[]
      campaignId?: number
      templateId?: number
      createdAt?: number
      total: number
      dataFields?: {
        [k: string]: unknown
      }
    }

    // Remove 'products' duplicate from dataFields
    if (dataFields && Object.prototype.hasOwnProperty.call(dataFields, 'products')) {
      delete dataFields.products
    }

    const trackPurchaseRequest: TrackPurchaseRequest = {
      ...payload,
      items: transformItems(payload.items),
      createdAt: dayjs(payload.createdAt).unix()
    }

    return request('https://api.iterable.com/api/commerce/trackPurchase', {
      method: 'post',
      json: trackPurchaseRequest
    })
  }
}

export default action
