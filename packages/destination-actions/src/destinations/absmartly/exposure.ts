import { InputField, ModifiedResponse, PayloadValidationError, RequestClient } from '@segment/actions-core'
import { defaultEventFields, DefaultPayload, PublishRequestEvent, sendEvent } from './event'
import { Settings } from './generated-types'
import { isValidTimestamp, unixTimestampOf } from './timestamp'
import { Data } from 'ws'

export interface ExposurePayload extends DefaultPayload {
  exposure: Record<string, unknown>
}

export const defaultExposureFields: Record<string, InputField> = {
  exposure: {
    label: 'ABsmartly Exposure Payload',
    type: 'object',
    defaultObjectUI: 'object:only',
    required: true,
    description:
      'The ABsmartly exposure payload without any goals. Generated by the ABsmartly SDK and should not be modified.',
    default: {
      '@path': '$.properties.exposure'
    }
  },
  ...defaultEventFields
}

function isValidExposure(exposure?: PublishRequestEvent | Record<string, unknown>): exposure is PublishRequestEvent {
  if (exposure == null || typeof exposure != 'object') {
    return false
  }

  const units = exposure['units']
  if (!Array.isArray(units) || units.length == 0) {
    return false
  }

  const exposures = exposure['exposures']
  if (!Array.isArray(exposures) || exposures.length === 0) {
    return false
  }

  const goals = exposure['goals']
  if (goals != null && (!Array.isArray(goals) || goals.length > 0)) {
    return false
  }

  const attributes = exposure['attributes']
  if (attributes != null && !Array.isArray(attributes)) {
    return false
  }

  return true
}

export function sendExposure(
  request: RequestClient,
  payload: ExposurePayload,
  settings: Settings
): Promise<ModifiedResponse<Data>> {
  if (!isValidTimestamp(payload.publishedAt)) {
    throw new PayloadValidationError(
      'Exposure `publishedAt` is required to be an ISO 8601 date-time string, or a Unix timestamp (milliseconds) number'
    )
  }

  const exposure = payload.exposure
  if (exposure == null || typeof exposure != 'object') {
    throw new PayloadValidationError('Field `exposure` is required to be an object when tracking exposures')
  }

  if (!isValidExposure(exposure)) {
    throw new PayloadValidationError(
      'Field `exposure` is malformed or contains goals. Ensure you are sending a valid ABsmartly exposure payload without goals.'
    )
  }

  return sendEvent(
    request,
    settings,
    {
      ...exposure,
      publishedAt: unixTimestampOf(payload.publishedAt)
    },
    payload.agent,
    payload.application
  )
}
