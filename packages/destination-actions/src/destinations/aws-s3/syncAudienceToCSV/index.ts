import type { ActionDefinition } from '@segment/actions-core'
import type { Settings, AudienceSettings } from '../generated-types'
import { generateFile } from '../operations'
import type { Payload } from './generated-types'
import { uploadS3, validateS3 } from './s3'

const action: ActionDefinition<Settings, Payload, AudienceSettings> = {
  title: 'Upload CSV',
  description: 'Uploads audience membership data to a CSV file in S3.',
  fields: {
    is_audience: {
      type: 'boolean',
      label: 'Check if uploading audience data',
      description: 'Check if the data being uploaded is audience data. This is required for sending audiences to S3',
      required: true,
      default: false
    },

    identifier_data: {
      label: 'Identifier Data',
      description: `Additional data pertaining to the user to be written to the file.`,
      type: 'object',
      required: false,
      defaultObjectUI: 'keyvalue:only'
    },
    unhashed_identifier_data: {
      label: 'Hashable Identifier Data',
      description: `Additional data pertaining to the user to be hashed before written to the file. Use field name **phone_number** or **email** to apply LiveRamp's specific hashing rules.`,
      type: 'object',
      required: false,
      defaultObjectUI: 'keyvalue:only'
    },

    computation_key: {
      label: 'Segment Audience Key',
      description: 'A unique identifier assigned to a specific audience in Segment.',
      type: 'string',
      required: false,
      unsafe_hidden: true,
      default: { '@path': '$.context.personas.computation_key' }
    },
    traits_or_props: {
      label: 'Traits or Properties',
      description: 'Hidden field used to access traits or properties objects from Engage payloads.',
      type: 'object',
      required: true,
      unsafe_hidden: true,
      default: {
        '@if': {
          exists: { '@path': '$.traits' },
          then: { '@path': '$.traits' },
          else: { '@path': '$.properties' }
        }
      }
    },
    computation_class: {
      label: 'Segment Audience Computation Class',
      description:
        "Hidden field used to verify that the payload is generated by an Audience. Payloads not containing computation_class = 'audience' will be dropped before the perform() fuction call.",
      type: 'string',
      required: true,
      unsafe_hidden: true,
      default: { '@path': '$.context.personas.computation_class' },
      choices: [{ label: 'Audience', value: 'audience' }]
    },

    enable_batching: {
      type: 'boolean',
      label: 'Batch data',
      description: 'Receive events in a batch payload. This is required for LiveRamp audiences ingestion.',
      unsafe_hidden: true,
      required: true,
      default: true
    },
    batch_size: {
      label: 'Batch Size',
      description: 'Maximum number of events to include in each batch. Actual batch sizes may be lower.',
      type: 'number',
      unsafe_hidden: true,
      required: false,
      default: 25000
    }
  },

  perform: async (_, { payload, settings, audienceSettings }) => {
    return processData([payload], settings, audienceSettings)
  },
  performBatch: (_, { payload, settings, audienceSettings }) => {
    return processData(payload, settings, audienceSettings)
  }
}

async function processData(payloads: Payload[], settings: Settings, audienceSettings?: AudienceSettings) {
  validateS3(settings, audienceSettings as AudienceSettings)
  const { filename, fileContents } = generateFile(payloads, settings, audienceSettings as AudienceSettings)
  return uploadS3(settings, audienceSettings as AudienceSettings, filename ?? '', fileContents)
}

export default action
